<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ 矩形交集和并集的面积-离散化</title>
    <link href="/2021/04/16/C-%E7%9F%A9%E5%BD%A2%E4%BA%A4%E9%9B%86%E5%92%8C%E5%B9%B6%E9%9B%86%E7%9A%84%E9%9D%A2%E7%A7%AF-%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    <url>/2021/04/16/C-%E7%9F%A9%E5%BD%A2%E4%BA%A4%E9%9B%86%E5%92%8C%E5%B9%B6%E9%9B%86%E7%9A%84%E9%9D%A2%E7%A7%AF-%E7%A6%BB%E6%95%A3%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs prolog">//离散化，x,y坐标分别按从小到大排序<br>//离散化<br>//<span class="hljs-number">1</span>、首先分离出所有的横坐标和纵坐标分别按升序存入数组<span class="hljs-symbol">X</span>[ ]和<span class="hljs-symbol">Y</span>[ ]中.<br>//<span class="hljs-number">2</span>、 设数组<span class="hljs-symbol">XY</span>[ ][ ].对于每个矩形(x1,y1)(x2,y2)确定i1,i2,j1,j2,使得,<span class="hljs-symbol">X</span>[i1]&gt;x1,<span class="hljs-symbol">X</span>[i2]&lt;=x2,<span class="hljs-symbol">Y</span>[i1]&gt;y1,<span class="hljs-symbol">Y</span>[i2]&gt;=y2令<span class="hljs-symbol">XY</span>[ i ][ j ] = <span class="hljs-number">1</span> (i从i1到i2，j从j1到j2)<br>//<span class="hljs-number">3</span>、统计面积：area+=<span class="hljs-symbol">XY</span>[i][j] *(<span class="hljs-symbol">X</span>[i]-<span class="hljs-symbol">X</span>[i<span class="hljs-number">-1</span>])*(<span class="hljs-symbol">Y</span>[i] – <span class="hljs-symbol">Y</span>[i<span class="hljs-number">-1</span>])<br> <br>#include&lt;iostream&gt;<br>#include&lt;string.h&gt;<br>#include&lt;stdio.h&gt;<br>#include &lt;algorithm&gt;<br>using namespace std;<br>double x[<span class="hljs-number">201</span>],y[<span class="hljs-number">201</span>],s[<span class="hljs-number">101</span>][<span class="hljs-number">4</span>];<br>int xy[<span class="hljs-number">201</span>][<span class="hljs-number">201</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>int n,cas=<span class="hljs-number">0</span>;<br>double sum1; // 并集面积<br>double sum2; // 交集面积<br>int main()<br>&#123;<br>    int i,j,k;<br>    while(cin&gt;&gt;n)<br>    &#123;   <br>        if(n==<span class="hljs-number">0</span>)<br>            break;<br>        cas++;<br>        k=<span class="hljs-number">0</span>;<br>        sum1 = <span class="hljs-number">0.0</span>;<br>        sum2 = <span class="hljs-number">0.0</span>;<br>        memset(xy,<span class="hljs-number">0</span>,sizeof(xy));<br>        for(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            cin&gt;&gt;s[i][<span class="hljs-number">0</span>]&gt;&gt;s[i][<span class="hljs-number">1</span>]&gt;&gt;s[i][<span class="hljs-number">2</span>]&gt;&gt;s[i][<span class="hljs-number">3</span>];<br>            x[k]=s[i][<span class="hljs-number">0</span>];<br>            y[k]=s[i][<span class="hljs-number">1</span>];<br>            k++;<br>            x[k]=s[i][<span class="hljs-number">2</span>];<br>            y[k]=s[i][<span class="hljs-number">3</span>];<br>            k++;<br>        &#125;<br>        sort(x,x+<span class="hljs-number">2</span>*n);<br>        sort(y,y+<span class="hljs-number">2</span>*n);<br>        int kk = <span class="hljs-number">0</span>;<br>        for(k=<span class="hljs-number">1</span>;k&lt;=n;k++)<br>        &#123;<br>            int i1,i2,j1,j2;<br>            for(i1=<span class="hljs-number">0</span>;i1&lt;<span class="hljs-number">2</span>*n;i1++)<br>            &#123;<br>                if(x[i1]==s[k][<span class="hljs-number">0</span>])<br>                    break;<br>            &#125;<br>            for(i2=<span class="hljs-number">0</span>;i2&lt;<span class="hljs-number">2</span>*n;i2++)<br>            &#123;<br>                if(x[i2]==s[k][<span class="hljs-number">2</span>])<br>                    break;<br>            &#125;<br>            for(j1=<span class="hljs-number">0</span>;j1&lt;<span class="hljs-number">2</span>*n;j1++)<br>            &#123;<br>                if(y[j1]==s[k][<span class="hljs-number">1</span>])<br>                    break;<br>            &#125;<br>            for(j2=<span class="hljs-number">0</span>;j2&lt;<span class="hljs-number">2</span>*n;j2++)<br>            &#123;<br>                if(y[j2]==s[k][<span class="hljs-number">3</span>])<br>                    break;<br>            &#125;<br>            for(i=i1;i&lt;i2;i++)<br>            &#123;<br>                for(j=j1;j&lt;j2;j++)<br>                &#123;<br>                    xy[i][j] |= <span class="hljs-number">1</span>&lt;&lt;(k<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>            kk |= <span class="hljs-number">1</span>&lt;&lt;(k<span class="hljs-number">-1</span>); // 所有bit都置为<span class="hljs-number">1</span><br>        &#125;<br>        <br>        for(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>*n;i++)<br>        &#123;<br>            for(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*n;j++)<br>            &#123;<br>                sum1 += ((xy[i][j] != <span class="hljs-number">0</span> ? <span class="hljs-number">1</span>:<span class="hljs-number">0</span>)*(x[i+<span class="hljs-number">1</span>]-x[i])*(y[j+<span class="hljs-number">1</span>]-y[j])); // 只要!=<span class="hljs-number">0</span>，说明至少有一个矩形占据过<br>                sum2 += ((xy[i][j] == kk ? <span class="hljs-number">1</span>:<span class="hljs-number">0</span>)*(x[i+<span class="hljs-number">1</span>]-x[i])*(y[j+<span class="hljs-number">1</span>]-y[j])); // 每个矩形都占据过这里<br>            &#125;<br>        &#125;<br>        printf(<span class="hljs-string">&quot;Test case #%d\n&quot;</span>,cas);<br>        printf(<span class="hljs-string">&quot;并集面积: %.2f\n&quot;</span>,sum1);<br>        printf(<span class="hljs-string">&quot;交集面积: %.2f\n&quot;</span>,sum2);<br>        printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：<br>2<br>10 10 20 20<br>15 15 25 25.5<br>输出：<br><span class="hljs-keyword">Test </span>case #1<br>并集面积: 180.00<br>交集面积: 25.00<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：<br>3<br>10 10 20 20<br>15 8 30 15<br>17 13 25 25<br>输出：<br><span class="hljs-keyword">Test </span>case #2<br>并集面积: 245.00<br>交集面积: 6.00<br></code></pre></td></tr></table></figure><p><img src="/images/1435243-20200818163121981-923844168.png"><br><img src="/images/1435243-20200818163112268-1586933907.png"><br><a href="https://blog.csdn.net/fall221/article/details/12314489?locationNum=10&fps=1">原文作者</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流媒体服务 Ubuntu部署srs、windows部署nginx</title>
    <link href="/2021/04/16/%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1-Ubuntu%E9%83%A8%E7%BD%B2srs%E3%80%81windows%E9%83%A8%E7%BD%B2nginx/"/>
    <url>/2021/04/16/%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1-Ubuntu%E9%83%A8%E7%BD%B2srs%E3%80%81windows%E9%83%A8%E7%BD%B2nginx/</url>
    
    <content type="html"><![CDATA[<h4 id="Ubuntu部署SRS"><a href="#Ubuntu部署SRS" class="headerlink" title="Ubuntu部署SRS"></a>Ubuntu部署SRS</h4><p>1、获取SRS项目<br>从码云获取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/winlinvip/</span>srs.oschina.git srs<br></code></pre></td></tr></table></figure><p>从github获取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ossrs/</span>srs.git<br></code></pre></td></tr></table></figure><p>2、进入trunk编辑</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> trunk<br><span class="hljs-string">./configure</span> &amp;&amp; make<br></code></pre></td></tr></table></figure><p>3、启动（指定配置文件）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/objs/</span>srs -c conf/srs.conf<br></code></pre></td></tr></table></figure><p>配置文件默认配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span>              <span class="hljs-number">1935</span>;<br><span class="hljs-attribute">max_connections</span>     <span class="hljs-number">1000</span>;<br><span class="hljs-attribute">srs_log_tank</span>        file;<br><span class="hljs-attribute">srs_log_file</span>        ./objs/srs.log;<br><span class="hljs-section">http_api</span> &#123;<br>    <span class="hljs-attribute">enabled</span>         <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">listen</span>          <span class="hljs-number">1985</span>;<br>&#125;<br><span class="hljs-section">http_server</span> &#123;<br>    <span class="hljs-attribute">enabled</span>         <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">listen</span>          <span class="hljs-number">8080</span>;<br>    <span class="hljs-attribute">dir</span>             ./objs/nginx/html;<br>&#125;<br><span class="hljs-section">stats</span> &#123;<br>    <span class="hljs-attribute">network</span>         <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">disk</span>            sda sdb xvda xvdb;<br>&#125;<br><span class="hljs-attribute">vhost</span> __defaultVhost__ &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用ffmpeg推流测试"><a href="#使用ffmpeg推流测试" class="headerlink" title="使用ffmpeg推流测试"></a>使用ffmpeg推流测试</h4><p>1、推流本地视频</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ffmpeg.exe -re -i 本地视频文件 -f flv rtmp:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1935</span><span class="hljs-regexp">/live/</span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>2、摄像头推流</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看设备列表<br>ffmpeg -list_devices true -f dshow -i dummy <br>推流<br>ffmpeg -f dshow -i video=<span class="hljs-string">&quot;devicesname&quot;</span> -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -f flv rtmp:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">1935</span><span class="hljs-regexp">/live/</span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>3、ffplay验证</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ffplay</span> <span class="hljs-string">&quot;rtmp://127.0.0.1:1935/live/123&quot;</span><br></code></pre></td></tr></table></figure><h4 id="windows部署nginx"><a href="#windows部署nginx" class="headerlink" title="windows部署nginx"></a>windows部署nginx</h4><p>1、下载支持rtmp的nginx <a href="http://nginx-win.ecsds.eu/download/nginx%201.7.11.3%20Gryphon.zip">nginx下载地址</a><br>2、下载rtmp模块解压后放在nginx.exe的同级目录 <a href="https://codeload.github.com/arut/nginx-rtmp-module/zip/master">rtmp模块</a><br>3、配置nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">rtmp</span> &#123;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">1935</span>;<br>        <span class="hljs-attribute">chunk_size</span> <span class="hljs-number">4096</span>;<br>        <span class="hljs-attribute">application</span> live &#123;<br>            <span class="hljs-attribute">live</span> <span class="hljs-literal">on</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、指定配置文件启动nginx</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">nginx.exe -c <span class="hljs-keyword">conf</span>\nginx-<span class="hljs-keyword">win</span>.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>流媒体服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流媒体服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 计算MD5</title>
    <link href="/2021/04/16/C-%E8%AE%A1%E7%AE%97MD5/"/>
    <url>/2021/04/16/C-%E8%AE%A1%E7%AE%97MD5/</url>
    
    <content type="html"><![CDATA[<p>头文件:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> MD5_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MD5_H</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-comment">/* Type define */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> <span class="hljs-keyword">byte</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uint32;<br><br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::ifstream;<br><br><span class="hljs-comment">/* MD5 declaration. */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">MD5</span>();<br>    <span class="hljs-built_in">MD5</span>(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* input, <span class="hljs-keyword">size_t</span> length);<br>    <span class="hljs-built_in">MD5</span>(<span class="hljs-keyword">const</span> string&amp; str);<br>    <span class="hljs-built_in">MD5</span>(ifstream&amp; in);<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* input, <span class="hljs-keyword">size_t</span> length)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; str)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ifstream&amp; in)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span>* <span class="hljs-title">digest</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reset</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span>* input, <span class="hljs-keyword">size_t</span> length)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">final</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span> block[<span class="hljs-number">64</span>])</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> uint32* input, <span class="hljs-keyword">byte</span>* output, <span class="hljs-keyword">size_t</span> length)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span>* input, uint32* output, <span class="hljs-keyword">size_t</span> length)</span></span>;<br>    <span class="hljs-function">string <span class="hljs-title">bytesToHexString</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span>* input, <span class="hljs-keyword">size_t</span> length)</span></span>;<br><br>    <span class="hljs-comment">/* class uncopyable */</span><br>    <span class="hljs-built_in">MD5</span>(<span class="hljs-keyword">const</span> MD5&amp;);<br>    MD5&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-keyword">const</span> MD5&amp;);<br><br><span class="hljs-keyword">private</span>:<br>    uint32 _state[<span class="hljs-number">4</span>]; <span class="hljs-comment">/* state (ABCD) */</span><br>    uint32 _count[<span class="hljs-number">2</span>]; <span class="hljs-comment">/* number of bits, modulo 2^64 (low-order word first) */</span><br>    <span class="hljs-keyword">byte</span> _buffer[<span class="hljs-number">64</span>]; <span class="hljs-comment">/* input buffer */</span><br>    <span class="hljs-keyword">byte</span> _digest[<span class="hljs-number">16</span>]; <span class="hljs-comment">/* message digest */</span><br>    <span class="hljs-keyword">bool</span> _finished;   <span class="hljs-comment">/* calculate finished ? */</span><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">byte</span> PADDING[<span class="hljs-number">64</span>]; <span class="hljs-comment">/* padding for calculate */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> HEX[<span class="hljs-number">16</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span> BUFFER_SIZE = <span class="hljs-number">1024</span> &#125;;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/*MD5_H*/</span></span><br></code></pre></td></tr></table></figure><p>源文件:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;md5.h&quot;</span><br><br>using namespace std;<br><br><span class="hljs-comment">/* Constants for MD5Transform routine. */</span><br>#define S11 <span class="hljs-number">7</span><br>#define S12 <span class="hljs-number">12</span><br>#define S13 <span class="hljs-number">17</span><br>#define S14 <span class="hljs-number">22</span><br>#define S21 <span class="hljs-number">5</span><br>#define S22 <span class="hljs-number">9</span><br>#define S23 <span class="hljs-number">14</span><br>#define S24 <span class="hljs-number">20</span><br>#define S31 <span class="hljs-number">4</span><br>#define S32 <span class="hljs-number">11</span><br>#define S33 <span class="hljs-number">16</span><br>#define S34 <span class="hljs-number">23</span><br>#define S41 <span class="hljs-number">6</span><br>#define S42 <span class="hljs-number">10</span><br>#define S43 <span class="hljs-number">15</span><br>#define S44 <span class="hljs-number">21</span><br><br><br><span class="hljs-comment">/* F, G, H and I are basic MD5 functions.</span><br><span class="hljs-comment">*/</span><br>#define <span class="hljs-constructor">F(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">z</span>)</span> (((x) &amp; (y)) <span class="hljs-pattern-match">| ((~x) &amp; (z)))</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">G(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">z</span>)</span> (((x) &amp; (z)) | ((y) &amp; (~z)))</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">H(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">z</span>)</span> ((x) ^ (y) ^ (z))</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">I(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>, <span class="hljs-params">z</span>)</span> ((y) ^ ((x) | (~z)))</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">ROTATE_LEFT</span> rotates x left n bits.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">ROTATE_LEFT(<span class="hljs-params">x</span>, <span class="hljs-params">n</span>)</span> (((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">FF</span>, <span class="hljs-constructor">GG</span>, <span class="hljs-constructor">HH</span>, <span class="hljs-keyword">and</span> <span class="hljs-constructor">II</span> transformations <span class="hljs-keyword">for</span> rounds 1, 2, 3, <span class="hljs-keyword">and</span> 4.</span><br><span class="hljs-pattern-match"><span class="hljs-constructor">Rotation</span> is separate from addition <span class="hljs-keyword">to</span> prevent recomputation.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">FF(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>, <span class="hljs-params">s</span>, <span class="hljs-params">ac</span>)</span> &#123; \</span><br><span class="hljs-pattern-match">(a) += <span class="hljs-constructor">F</span> ((b), (c), (d)) + (x) + ac; \</span><br><span class="hljs-pattern-match">(a) = <span class="hljs-constructor">ROTATE_LEFT</span> ((a), (s)); \</span><br><span class="hljs-pattern-match">(a) += (b); \</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">GG(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>, <span class="hljs-params">s</span>, <span class="hljs-params">ac</span>)</span> &#123; \</span><br><span class="hljs-pattern-match">(a) += <span class="hljs-constructor">G</span> ((b), (c), (d)) + (x) + ac; \</span><br><span class="hljs-pattern-match">(a) = <span class="hljs-constructor">ROTATE_LEFT</span> ((a), (s)); \</span><br><span class="hljs-pattern-match">(a) += (b); \</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">HH(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>, <span class="hljs-params">s</span>, <span class="hljs-params">ac</span>)</span> &#123; \</span><br><span class="hljs-pattern-match">(a) += <span class="hljs-constructor">H</span> ((b), (c), (d)) + (x) + ac; \</span><br><span class="hljs-pattern-match">(a) = <span class="hljs-constructor">ROTATE_LEFT</span> ((a), (s)); \</span><br><span class="hljs-pattern-match">(a) += (b); \</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match">#define <span class="hljs-constructor">II(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>, <span class="hljs-params">s</span>, <span class="hljs-params">ac</span>)</span> &#123; \</span><br><span class="hljs-pattern-match">(a) += <span class="hljs-constructor">I</span> ((b), (c), (d)) + (x) + ac; \</span><br><span class="hljs-pattern-match">(a) = <span class="hljs-constructor">ROTATE_LEFT</span> ((a), (s)); \</span><br><span class="hljs-pattern-match">(a) += (b); \</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">const byte <span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">PADDING</span>[64] = &#123; 0x80 &#125;;</span><br><span class="hljs-pattern-match">const <span class="hljs-built_in">char</span> <span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">HEX</span>[16] = &#123;</span><br><span class="hljs-pattern-match">&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;,</span><br><span class="hljs-pattern-match">&#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;,</span><br><span class="hljs-pattern-match">&#x27;8&#x27;, &#x27;9&#x27;, &#x27;a&#x27;, &#x27;b&#x27;,</span><br><span class="hljs-pattern-match">&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;</span><br><span class="hljs-pattern-match">&#125;;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Default</span> construct. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">MD5()</span> &#123;</span><br><span class="hljs-pattern-match">    reset();</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Construct</span> a <span class="hljs-constructor">MD5</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">with</span> a input buffer. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">MD5(<span class="hljs-params">const</span> <span class="hljs-params">void</span><span class="hljs-operator">*</span> <span class="hljs-params">input</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">length</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    reset();</span><br><span class="hljs-pattern-match">    update(input, length);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Construct</span> a <span class="hljs-constructor">MD5</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">with</span> a <span class="hljs-built_in">string</span>. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">MD5(<span class="hljs-params">const</span> <span class="hljs-params">string</span>&amp; <span class="hljs-params">str</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    reset();</span><br><span class="hljs-pattern-match">    update(str);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Construct</span> a <span class="hljs-constructor">MD5</span> <span class="hljs-keyword">object</span> <span class="hljs-keyword">with</span> a file. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-constructor">MD5</span>::<span class="hljs-constructor">MD5(<span class="hljs-params">ifstream</span>&amp; <span class="hljs-params">in</span>)</span> &#123;</span><br><span class="hljs-pattern-match">    reset();</span><br><span class="hljs-pattern-match">    update(<span class="hljs-keyword">in</span>);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Return</span> the message-digest <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">const byte<span class="hljs-operator">*</span> <span class="hljs-constructor">MD5</span>::digest() &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (!<span class="hljs-constructor">_finished</span>) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">_finished</span> = <span class="hljs-literal">true</span>;</span><br><span class="hljs-pattern-match">        final();</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return <span class="hljs-constructor">_digest</span>;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Reset</span> the calculate state <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::reset() &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_finished</span> = <span class="hljs-literal">false</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> reset number <span class="hljs-keyword">of</span> bits. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_count</span>[0] = <span class="hljs-constructor">_count</span>[1] = 0;</span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Load</span> magic initialization constants. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[0] = 0x67452301;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[1] = 0xefcdab89;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[2] = 0x98badcfe;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[3] = 0x10325476;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Updating</span> the context <span class="hljs-keyword">with</span> a input buffer. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::update(const void<span class="hljs-operator">*</span> input, size<span class="hljs-constructor">_t</span> length) &#123;</span><br><span class="hljs-pattern-match">    update((const byte<span class="hljs-operator">*</span>)input, length);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Updating</span> the context <span class="hljs-keyword">with</span> a <span class="hljs-built_in">string</span>. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::update(const <span class="hljs-built_in">string</span>&amp; str) &#123;</span><br><span class="hljs-pattern-match">    update((const byte<span class="hljs-operator">*</span>)str.c<span class="hljs-constructor">_str()</span>, str.length());</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Updating</span> the context <span class="hljs-keyword">with</span> a file. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::update(ifstream&amp; <span class="hljs-keyword">in</span>) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">in</span>) &#123;</span><br><span class="hljs-pattern-match">        return;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    std::streamsize length;</span><br><span class="hljs-pattern-match">    <span class="hljs-built_in">char</span> buffer[<span class="hljs-constructor">BUFFER_SIZE</span>];</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">while</span> (!<span class="hljs-keyword">in</span>.eof()) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">in</span>.read(buffer, <span class="hljs-constructor">BUFFER_SIZE</span>);</span><br><span class="hljs-pattern-match">        length = <span class="hljs-keyword">in</span>.gcount();</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span> (length &gt; 0) &#123;</span><br><span class="hljs-pattern-match">            update(buffer, length);</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">in</span>.close();</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">MD5</span> block update operation. <span class="hljs-constructor">Continues</span> an <span class="hljs-constructor">MD5</span> message-digest</span><br><span class="hljs-pattern-match">operation, processing another message block, <span class="hljs-keyword">and</span> updating the</span><br><span class="hljs-pattern-match">context.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::update(const byte<span class="hljs-operator">*</span> input, size<span class="hljs-constructor">_t</span> length) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    uint32 i, index, part<span class="hljs-constructor">Len</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_finished</span> = <span class="hljs-literal">false</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Compute</span> number <span class="hljs-keyword">of</span> <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">mod</span> 64 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    index = (uint32)((<span class="hljs-constructor">_count</span>[0] &gt;&gt; 3) &amp; 0x3f);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> update number <span class="hljs-keyword">of</span> bits <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> ((<span class="hljs-constructor">_count</span>[0] += ((uint32)length &lt;&lt; 3)) &lt; ((uint32)length &lt;&lt; 3)) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-operator">++</span><span class="hljs-constructor">_count</span>[1];</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_count</span>[1] += ((uint32)length &gt;&gt; 29);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    part<span class="hljs-constructor">Len</span> = 64 - index;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> transform <span class="hljs-keyword">as</span> many times <span class="hljs-keyword">as</span> possible. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">if</span> (length &gt;= part<span class="hljs-constructor">Len</span>) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        memcpy(&amp;<span class="hljs-constructor">_buffer</span>[index], input, part<span class="hljs-constructor">Len</span>);</span><br><span class="hljs-pattern-match">        transform(<span class="hljs-constructor">_buffer</span>);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">for</span> (i = part<span class="hljs-constructor">Len</span>; i + 63 &lt; length; i += 64) &#123;</span><br><span class="hljs-pattern-match">            transform(&amp;input[i]);</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        index = 0;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">else</span> &#123;</span><br><span class="hljs-pattern-match">        i = 0;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Buffer</span> remaining input <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    memcpy(&amp;<span class="hljs-constructor">_buffer</span>[index], &amp;input[i], length - i);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">MD5</span> finalization. <span class="hljs-constructor">Ends</span> an <span class="hljs-constructor">MD5</span> message-<span class="hljs-constructor">_digest</span> operation, writing the</span><br><span class="hljs-pattern-match">the message <span class="hljs-constructor">_digest</span> <span class="hljs-keyword">and</span> zeroizing the context.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::final() &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    byte bits[8];</span><br><span class="hljs-pattern-match">    uint32 old<span class="hljs-constructor">State</span>[4];</span><br><span class="hljs-pattern-match">    uint32 old<span class="hljs-constructor">Count</span>[2];</span><br><span class="hljs-pattern-match">    uint32 index, pad<span class="hljs-constructor">Len</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Save</span> current state <span class="hljs-keyword">and</span> count. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    memcpy(old<span class="hljs-constructor">State</span>, <span class="hljs-constructor">_state</span>, 16);</span><br><span class="hljs-pattern-match">    memcpy(old<span class="hljs-constructor">Count</span>, <span class="hljs-constructor">_count</span>, 8);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Save</span> number <span class="hljs-keyword">of</span> bits <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    encode(<span class="hljs-constructor">_count</span>, bits, 8);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Pad</span> out <span class="hljs-keyword">to</span> 56 <span class="hljs-keyword">mod</span> 64. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    index = (uint32)((<span class="hljs-constructor">_count</span>[0] &gt;&gt; 3) &amp; 0x3f);</span><br><span class="hljs-pattern-match">    pad<span class="hljs-constructor">Len</span> = (index &lt; 56) ? (56 - index) : (120 - index);</span><br><span class="hljs-pattern-match">    update(<span class="hljs-constructor">PADDING</span>, pad<span class="hljs-constructor">Len</span>);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Append</span> length (before padding) <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    update(bits, 8);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Store</span> state <span class="hljs-keyword">in</span> digest <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    encode(<span class="hljs-constructor">_state</span>, <span class="hljs-constructor">_digest</span>, 16);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Restore</span> current state <span class="hljs-keyword">and</span> count. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    memcpy(<span class="hljs-constructor">_state</span>, old<span class="hljs-constructor">State</span>, 16);</span><br><span class="hljs-pattern-match">    memcpy(<span class="hljs-constructor">_count</span>, old<span class="hljs-constructor">Count</span>, 8);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">MD5</span> basic transformation. <span class="hljs-constructor">Transforms</span> <span class="hljs-constructor">_state</span> based on block. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::transform(const byte block[64]) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    uint32 a = <span class="hljs-constructor">_state</span>[0], b = <span class="hljs-constructor">_state</span>[1], c = <span class="hljs-constructor">_state</span>[2], d = <span class="hljs-constructor">_state</span>[3], x[16];</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    decode(block, x, 64);</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Round</span> 1 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[0], S11, 0xd76aa478)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 1 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[1], S12, 0xe8c7b756)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 2 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[2], S13, 0x242070db)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 3 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[3], S14, 0xc1bdceee)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 4 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[4], S11, 0xf57c0faf)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 5 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[5], S12, 0x4787c62a)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 6 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[6], S13, 0xa8304613)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 7 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[7], S14, 0xfd469501)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 8 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[8], S11, 0x698098d8)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 9 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[9], S12, 0x8b44f7af)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 10 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[10], S13, 0xffff5bb1)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 11 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[11], S14, 0x895cd7be)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 12 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[12], S11, 0x6b901122)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 13 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[13], S12, 0xfd987193)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 14 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[14], S13, 0xa679438e)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 15 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">FF(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[15], S14, 0x49b40821)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 16 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Round</span> 2 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[1], S21, 0xf61e2562)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 17 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[6], S22, 0xc040b340)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 18 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[11], S23, 0x265e5a51)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 19 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[0], S24, 0xe9b6c7aa)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 20 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[5], S21, 0xd62f105d)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 21 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[10], S22, 0x2441453)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 22 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[15], S23, 0xd8a1e681)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 23 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[4], S24, 0xe7d3fbc8)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 24 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[9], S21, 0x21e1cde6)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 25 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[14], S22, 0xc33707d6)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 26 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[3], S23, 0xf4d50d87)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 27 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[8], S24, 0x455a14ed)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 28 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[13], S21, 0xa9e3e905)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 29 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[2], S22, 0xfcefa3f8)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 30 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[7], S23, 0x676f02d9)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 31 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">GG(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[12], S24, 0x8d2a4c8a)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 32 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Round</span> 3 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[5], S31, 0xfffa3942)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 33 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[8], S32, 0x8771f681)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 34 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[11], S33, 0x6d9d6122)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 35 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[14], S34, 0xfde5380c)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 36 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[1], S31, 0xa4beea44)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 37 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[4], S32, 0x4bdecfa9)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 38 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[7], S33, 0xf6bb4b60)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 39 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[10], S34, 0xbebfbc70)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 40 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[13], S31, 0x289b7ec6)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 41 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[0], S32, 0xeaa127fa)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 42 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[3], S33, 0xd4ef3085)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 43 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[6], S34, 0x4881d05)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 44 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[9], S31, 0xd9d4d039)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 45 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[12], S32, 0xe6db99e5)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 46 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[15], S33, 0x1fa27cf8)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 47 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">HH(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[2], S34, 0xc4ac5665)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 48 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Round</span> 4 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[0], S41, 0xf4292244)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 49 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[7], S42, 0x432aff97)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 50 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[14], S43, 0xab9423a7)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 51 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[5], S44, 0xfc93a039)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 52 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[12], S41, 0x655b59c3)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 53 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[3], S42, 0x8f0ccc92)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 54 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[10], S43, 0xffeff47d)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 55 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[1], S44, 0x85845dd1)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 56 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[8], S41, 0x6fa87e4f)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 57 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[15], S42, 0xfe2ce6e0)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 58 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[6], S43, 0xa3014314)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 59 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[13], S44, 0x4e0811a1)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 60 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">x</span>[4], S41, 0xf7537e82)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 61 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">x</span>[11], S42, 0xbd3af235)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 62 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">x</span>[2], S43, 0x2ad7d2bb)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 63 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">II(<span class="hljs-params">b</span>, <span class="hljs-params">c</span>, <span class="hljs-params">d</span>, <span class="hljs-params">a</span>, <span class="hljs-params">x</span>[9], S44, 0xeb86d391)</span>; <span class="hljs-operator">/</span><span class="hljs-operator">*</span> 64 <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[0] += a;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[1] += b;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[2] += c;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">_state</span>[3] += d;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Encodes</span> input (ulong) into output (byte). <span class="hljs-constructor">Assumes</span> length is</span><br><span class="hljs-pattern-match">a multiple <span class="hljs-keyword">of</span> 4.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::encode(const uint32<span class="hljs-operator">*</span> input, byte<span class="hljs-operator">*</span> output, size<span class="hljs-constructor">_t</span> length) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">for</span> (size<span class="hljs-constructor">_t</span> i = 0, j = 0; j &lt; length; <span class="hljs-operator">++</span>i, j += 4) &#123;</span><br><span class="hljs-pattern-match">        output[j] = (byte)(input[i] &amp; 0xff);</span><br><span class="hljs-pattern-match">        output[j + 1] = (byte)((input[i] &gt;&gt; 8) &amp; 0xff);</span><br><span class="hljs-pattern-match">        output[j + 2] = (byte)((input[i] &gt;&gt; 16) &amp; 0xff);</span><br><span class="hljs-pattern-match">        output[j + 3] = (byte)((input[i] &gt;&gt; 24) &amp; 0xff);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Decodes</span> input (byte) into output (ulong). <span class="hljs-constructor">Assumes</span> length is</span><br><span class="hljs-pattern-match">a multiple <span class="hljs-keyword">of</span> 4.</span><br><span class="hljs-pattern-match"><span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match">void <span class="hljs-constructor">MD5</span>::decode(const byte<span class="hljs-operator">*</span> input, uint32<span class="hljs-operator">*</span> output, size<span class="hljs-constructor">_t</span> length) &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">for</span> (size<span class="hljs-constructor">_t</span> i = 0, j = 0; j &lt; length; <span class="hljs-operator">++</span>i, j += 4) &#123;</span><br><span class="hljs-pattern-match">        output[i] = ((uint32)input[j]) | (((uint32)input[j + 1]) &lt;&lt; 8) |</span><br><span class="hljs-pattern-match">            (((uint32)input[j + 2]) &lt;&lt; 16) | (((uint32)input[j + 3]) &lt;&lt; 24);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Convert</span> byte <span class="hljs-built_in">array</span> <span class="hljs-keyword">to</span> hex <span class="hljs-built_in">string</span>. <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-built_in">string</span> <span class="hljs-constructor">MD5</span>::<span class="hljs-built_in">bytes</span><span class="hljs-constructor">ToHexString(<span class="hljs-params">const</span> <span class="hljs-params">byte</span><span class="hljs-operator">*</span> <span class="hljs-params">input</span>, <span class="hljs-params">size_t</span> <span class="hljs-params">length</span>)</span> &#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    <span class="hljs-built_in">string</span> str;</span><br><span class="hljs-pattern-match">    str.reserve(length &lt;&lt; 1);</span><br><span class="hljs-pattern-match">    <span class="hljs-keyword">for</span> (size<span class="hljs-constructor">_t</span> i = 0; i &lt; length; <span class="hljs-operator">++</span>i) &#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span> t = input[i];</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span> a = t <span class="hljs-operator">/</span> 16;</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span> b = t % 16;</span><br><span class="hljs-pattern-match">        str.append(1, <span class="hljs-constructor">HEX</span>[a]);</span><br><span class="hljs-pattern-match">        str.append(1, <span class="hljs-constructor">HEX</span>[b]);</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    return str;</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"><span class="hljs-operator">/</span><span class="hljs-operator">*</span> <span class="hljs-constructor">Convert</span> digest <span class="hljs-keyword">to</span> <span class="hljs-built_in">string</span> value <span class="hljs-operator">*</span><span class="hljs-operator">/</span></span><br><span class="hljs-pattern-match"><span class="hljs-built_in">string</span> <span class="hljs-constructor">MD5</span>::<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span> &#123;</span><br><span class="hljs-pattern-match">    return <span class="hljs-built_in">bytes</span><span class="hljs-constructor">ToHexString(<span class="hljs-params">digest</span>()</span>, 16);</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>调用:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MD5 md5;<br>md5.reset<span class="hljs-literal">()</span>;<br>ifstream check<span class="hljs-constructor">File(<span class="hljs-string">&quot;C:\\test.dat&quot;</span>, <span class="hljs-params">ios</span>::<span class="hljs-params">in</span> | <span class="hljs-params">ios</span>::<span class="hljs-params">binary</span>)</span>;<br>md5.update(checkFile);<br>checkFile.close<span class="hljs-literal">()</span>;<br>cout &lt;&lt; md5.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Ubuntu18.04中文乱码</title>
    <link href="/2021/04/16/Docker-Ubuntu18-04%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2021/04/16/Docker-Ubuntu18-04%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>docker ubuntu18.04<br><img src="/images/1435243-20210203151747848-817304392.png"><br>使用cat查看中文正常，使用vim查看中文乱码。</p><h4 id="Ubuntu中文乱码"><a href="#Ubuntu中文乱码" class="headerlink" title="Ubuntu中文乱码"></a>Ubuntu中文乱码</h4><p>解决此问题需要修改“/etc/profile”文件。</p><p>1、修改前查看本地使用的语言环境：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">locale</span><br></code></pre></td></tr></table></figure><p><img src="/images/1435243-20210203151909218-740942608.png"></p><p>2、查看本地支持的语言环境：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">locale -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p><img src="/images/1435243-20210203152141946-1754130651.png"></p><p>3、然后将“/etc/profile”文件的结尾添加上“export  LANG=C.UTF-8”<br>编辑文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>末尾添加上 export  LANG=C.UTF-8<br>重新加载即可：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">source</span> <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><h4 id="设置容器自动执行命令"><a href="#设置容器自动执行命令" class="headerlink" title="设置容器自动执行命令"></a>设置容器自动执行命令</h4><p>修改~/.bashrc 配置文件，在文件末尾加上想执行的命令即可</p><p>　　</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/15/hello-world/"/>
    <url>/2021/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
